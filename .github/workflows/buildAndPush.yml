# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: buildAndPush

on:
  push:
    branches: [ "main" ]
  #  pull_request:
  #   branches: [ "main" ]

permissions:
  contents: read

jobs:
  #build:
  # runs-on: ubuntu-latest
  #steps:
  #- uses: actions/checkout@v3
  #- name: Set up JDK 17
  # uses: actions/setup-java@v3
  #with:
  # java-version: '17'
  #distribution: 'corretto'
  #- name: Build with Gradle
  # uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
  #with:
  # arguments:  clean build

  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: hornet-rational-immensely.ngrok-free.app/em-service:latest
          platforms: linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
  restart-containers:
    runs-on: self-hosted
    needs: build-image
    steps:
      - name: pull latest images from registry
        run: |
          echo "Pulling latest images from registry"
          docker compose -f /home/srimal/rh-app/docker-compose.yml pull
          echo "Images pulled from registry"
      - name: start filebeat container
        run: |
          echo "Starting filebeat container"
          docker start 20f2cad1f733
          echo "Filebeat container started"
      - name: Check if rh_bridge network exists
        id: check_network
        run: |
          if docker network ls | grep -q rh_bridge; then
            echo "Network exists."
            echo "network_exists=true" >> $GITHUB_ENV
          else
            echo "Network does not exist."
            echo "network_exists=false" >> $GITHUB_ENV
          fi

      - name: Create network if it does not exist
        if: env.network_exists == 'false'
        run: |
          docker network create rh_bridge
          echo "Network created."



      - name: restart containers
        run: |
          echo "Restarting containers"
          docker compose -f /home/srimal/rh-app/docker-compose.yml up -d
          echo "Containers restarted"
      #send slack notification

  Send-slack-notification:
    needs: restart-containers
    runs-on: self-hosted
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_USERNAME: "GitHub Actions"
          SLACK_MESSAGE_ON_SUCCESS: "Sync Service Docker Image has been updated"
          SLACK_COLOR: "#00FF00"
          SLACK_MESSAGE_ON_FAILURE: "BUILD FAILURE"